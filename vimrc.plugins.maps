
let mapleader = ','

" {{{
if utils#PlugLoaded('vim-easy-align')
    xmap ga <Plug>(EasyAlign)|                                                                                  " Start interactive EasyAlign in visual mode (e.g. vipga)
    nmap ga <Plug>(EasyAlign)|                                                                                  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
endif
" }}}

" {{{
if utils#PlugLoaded('fzf')
    nnoremap <leader>ff :Files<CR>
endif
" }}}

" {{{
if utils#PlugLoaded('nerdtree')
    map <leader>n :NERDTreeToggle<Enter>
endif
" }}}

" {{{
if g:utils#PlugLoaded('coc.nvim')
    "IF (pop menu is visible) <ctrl-n> ELSE IF (is autocompletable word) show pop menu again ELSE <tab>
    inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : g:IsAutocompletable() ? coc#refresh() : "\<TAB>"|   " Use tab for trigger completion with characters ahead
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"|                                                  " Use tab for trigger completion navigation
    inoremap <silent><expr> <c-space> coc#refresh()|                                                            " Use <c-space> to trigger completion.
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"|                                              " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position (Coc only does snippet and additional edit on confirm)

    nmap <silent> [c <Plug>(coc-diagnostic-prev)
    nmap <silent> ]c <Plug>(coc-diagnostic-next)

    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    xmap <leader>a  <Plug>(coc-codeaction-selected)|                                                            " Remap for do codeAction of selected region (visual mode)
    nmap <leader>a  <Plug>(coc-codeaction-selected)|                                                            " Remap for do codeAction of selected region (normal mode). Ex: `<leader>aap` for current paragraph
    nmap <leader>ac  <Plug>(coc-codeaction)|                                                                    " Remap for do codeAction of current line
    nmap <leader>qf  <Plug>(coc-fix-current)|                                                                   " Remap for fix problem of current line

    nmap <silent> <TAB> <Plug>(coc-range-select)|                                                               " Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
    xmap <silent> <TAB> <Plug>(coc-range-select)|                                                               " Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
    xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)|                                                    " Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python

    nnoremap <silent> K :call g:Show_documentation()<CR>|                                                       " Use K to show documentation of current word in preview window

    nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>|                                                  " Show all diagnostics
    nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>|                                                   " Manage extensions
    nnoremap <silent> <space>c  :<C-u>CocList commands<cr>|                                                     " Show commands
    nnoremap <silent> <space>o  :<C-u>CocList outline<cr>|                                                      " Find symbol of current document
    nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>|                                                   " Search workspace symbols
    nnoremap <silent> <space>j  :<C-u>CocNext<CR>|                                                              " Do default action for next item.
    nnoremap <silent> <space>k  :<C-u>CocPrev<CR>|                                                              " Do default action for previous item.
    nnoremap <silent> <space>p  :<C-u>CocListResume<CR>|                                                        " Resume latest coc list
endif
" }}}

