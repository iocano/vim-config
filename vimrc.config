" {{{ Behaviour

set nocompatible               " No vi compatible: add more functionalities
set encoding=utf-8             " Character enconding
set clipboard=unnamed          " Use system clipboard
set foldmethod=syntax          " fold code by syntax
set nowrap                     " No wrap long line
set textwidth=200              " line lenght
set hidden                     " Change buffer without save
set splitright                 " Open vertical window on right side
set splitbelow                 " Open horizontal window on bottom

set incsearch                  " Incremental searching
set ignorecase                 " Searches are case insensitive
set smartcase                  " Unless they contain at least one capital letter

set backspace=indent,eol,start " Allow delete before insertion point
set nojoinspaces               " Avoid doublespace on joined line
set formatoptions+=j           " Join comments
set modeline                   " Enable read file modeline
set modelineexpr

set mouse=a                    " Enable mouse on (a)ll modes

set t_TI= t_TE=                " Disable the modifyOtherKeys (fix weird charcters appears on command line)

set spell                      " spell on
syntax on                      " Syntax highlight
filetype plugin indent on      " Enable detection of file type that is edited  (auto detect filetype and indent based on plugin)

" {{{ Overwrite p normal mode command
let @p='i ^[p'
" on p command:
"   enter insert mode
"   insert space
"   get back to normal mode (^[)
"   finally do the paste
" }}}

" }}}

" {{{ Visual
set number                              " Show line number
set relativenumber                      " Line number are relative to current line
set numberwidth=1                       " line numbers columns
set foldcolumn=5                        " Hide fold column
" set foldtext=utils#MyFoldText()               " Fold text view
set ruler                               " Show line and column number
set showcmd                             " Show command  (last screen line)
set cursorline                          " Underline current line
set showmatch                           " Show match bracket, parentheses, etc
set laststatus=2                        " Show status bar
set mousehide                           " Hide mouse pointer when typing

set t_Co=256                            " Number of colors on terminal
set background=dark                     " Background color
set termguicolors                       " Color 24 bits
colorscheme darkblue

" }}}

" {{{ Backups
set history=1000               " Command line history
set backup                     " Backup file
set undofile                   " Save undo history
set undolevels=1000            " Number of changes that can be undone
set undoreload=10000           " Number of lines to save for undo on a buffer reload
" }}}

" {{{ Indent
set autoindent                 " Copy indent level from previous line
set expandtab                  " Use 'shiftwidth' spaces as tab
set shiftwidth=4               " Spaces inserted when (auto)indent, cindent or press '>>' or '<<' or '=='
set softtabstop=4              " Spaces number that are inserted if <tab> or deleted if <bs> is pressed
set tabstop=4                  " Spaces number of the <tab> character counts
" }}}

" {{{ GUI config
if has('gui_running')
    set guioptions=A        " Make yanked text available for paste into other applications
    set guioptions+=c       " Use console dialogs instead of pupup dialogs
    set guifont=CaskaydiaCove_Nerd_Font:h9:cANSI:qDRAFT
    if IsLinux()
     set guifont=DroidSansMono\ Nerd\ Font:h9:cANSI:qDRAFT
    endif
endif
" }}}

" {{{ Viminfo
set viminfo='1000                                               " specify how many files for which you save marks (a-z)
set viminfo+=f1                                                 " store (enable: 0, disable: 0) global marks (A-Z and 0-9)
set viminfo+=<500                                               " number of lines that are saved for each of the registers (use max 500 lines)
set viminfo+=%                                                  " restore buffer list (only when starting vim without file argument)
set viminfo+=/100                                               " number of lines to save from the search history
set viminfo+=rA:                                                " no store marks for removable media A
set viminfo+=rB:                                                " no store marks for removable media B
set viminfo+=:100                                               " number of lines to save from the command line history
set viminfo+=@100                                               " number of lines to save from the input line history (input function)
set viminfo+=h                                                  " disable hlsearch highlighting when starting
set viminfo+=c                                                  " convert text using encoding
execute printf("set viminfo+=n%s", utils#GetVimInfoFile()) |    " set viminfo path/name
" set viminfo+=n~/.vim/viminfo
" }}}

" {{{ Set of configuration directories { option = folder, ...}
let s:options = ['backupdir', 'undodir', 'directory', 'viewdir']
for option in s:options
    execute printf('set %s=%s', option, utils#GetDirectoryFor(option))
endfor
" }}}

" {{{ Show special chars as visible characters (set list)
set listchars+=tab:<->
set listchars+=space:_
set listchars+=trail:.
set listchars+=extends:+
set listchars+=precedes:<
set listchars+=conceal:#
set listchars+=nbsp:!
set listchars+=eol:$
" }}}

" {{{
augroup set_working_directory_to_current_file
    autocmd!
    autocmd BufEnter * silent! lcd %:p:h
augroup END
" }}}

" {{{
augroup fold_color
    autocmd!
    autocmd VimEnter * highlight Folded ctermfg=245     " Change foreground color on fold
    autocmd VimEnter * highlight Folded ctermbg=234     " Change background color on fold
    autocmd VimEnter * highlight Folded guibg=gray12    " Change background color on fold
    autocmd VimEnter * highlight Folded guifg=gray70    " Change foreground color on fold
augroup END
" }}}

" {{{
augroup delete_trailing_whitespaces
    autocmd!
    autocmd BufWritePre * %s/\s\+$//e
augroup END
" }}}

" {{{
" augroup remember_folds
"     autocmd!
"     autocmd BufWinLeave * mkview
"     autocmd BufWinEnter * silent! loadview
" augroup END
" }}}

" {{{
augroup keep_folds_closed_while_insert
    autocmd!
    autocmd InsertEnter * let w:last_fdm=&foldmethod | setlocal foldmethod=manual
    autocmd InsertLeave * let &l:foldmethod=w:last_fdm
" }}}

" {{{
augroup remove_bell_flash_screen
    autocmd!
    autocmd VimEnter * set noerrorbells     " Disable sound on error messages
    autocmd VimEnter * set visualbell       " Use visual bell (flash screen) instead of beeping
    autocmd VimEnter * set t_vb=            " No flash screen (set after termguicolors and t_co options)
augroup END
" }}}

" {{{
" augroup vim_filetype_config
"     autocmd!
"     autocmd FileType vim setlocal foldmarker={{{,}}} foldmethod=marker
" augroup END
" }}}
"
" augroup vim_folding
"     autocmd!
"     autocmd FileType vim set foldmethod=expr foldlevel=0
"     " note that double quote in foldexpr has to be escaped with backslash
"     autocmd FileType vim set foldexpr=getline(v:lnum)=~'^\"#'?'>'.(matchend(getline(v:lnum),'\"#*')-1):'='
" augroup END

" {{{
augroup txt_filetype_config
    autocmd!
    autocmd VimEnter *.txt setlocal foldmarker={{{,}}} foldmethod=marker
augroup END
" }}}

" {{{
augroup js_filetype_config
    autocmd!
    autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
augroup END
" }}}

" {{{ pending to review
" augroup auto_reload_myvimrc
"     au!
"     au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
"     if has ('autocmd') " Remain compatible with earlier versions
"      augroup vimrc     " Source vim configuration upon save
"         autocmd! BufWritePost $MYVIMRC source % | echom "Reloaded " . $MYVIMRC | redraw
"         autocmd! BufWritePost $MYGVIMRC if has('gui_running') | so % | echom "Reloaded " . $MYGVIMRC | endif | redraw
"       augroup END
"     endif " has autocmd
" augroup END
" }}}
