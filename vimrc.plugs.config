
" {{{
if g:PlugLoaded('coc.nvim')

    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}                         " Add status line support, for integration with other plugin, checkout `:h coc-status`

    command! -nargs=0 Format :call  CocAction('format')|                                        " use `:Format` to format current buffer
    command! -nargs=? Fold   :call  CocAction('fold', <f-args>)|                                " use `:Fold` to fold current buffer
    command! -nargs=0 OR     :call  CocAction('runCommand', 'editor.action.organizeImport')|    " use `:OR` for organize import of current buffer

    " {{{
    augroup x_filetype
      autocmd!
      autocmd FileType * setl formatexpr=CocAction('formatSelected')                            " setup formatexpr for specified filetype(s).
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')                  " show signature help on jump to placeholder
    augroup END
    " }}}

    " {{{
    augroup coc-settings.json
        autocmd!
        autocmd VimEnter coc-settings.json set nospell
    augroup END
    " }}}
endif
" }}}

" {{{
if g:PlugLoaded('vim-airline')
    if g:PlugLoaded('vim-airline-themes')
        let g:airline_theme='base16_gruvbox_dark_hard'
    endif
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#fnamemod = ':t'                      " Show just the filename
endif
" }}}

" {{{
if g:PlugLoaded('indentLine')
    if has('win32') && has('gui')
        let g:indentLine_char = ''
        let g:indentLine_first_char = ''
    endif
    let g:indentLine_showFirstIndentLevel = 1
    let g:indentLine_setColors = 1
    autocmd Filetype json let g:indentLine_enabled = 0
endif
" }}}

" {{{
if g:PlugLoaded('nerdtree')
    let NERDTreeShowBookmarks=1
    let NERDTreeChDirMode=0
    let NERDTreeQuitOnOpen=1
    let NERDTreeMouseMode=2
    let NERDTreeShowHidden=1
    let NERDTreeKeepTreeInNewTab=1
    let g:nerdtree_tabs_open_on_gui_startup=0
    let NERDTreeShowLineNumbers=1                                         " enable line numbers
    let g:NERDTreeDirArrowExpandable = '+'
    autocmd FileType nerdtree setlocal relativenumber                     " make sure relative line numbers are used
endif
" }}}

" {{{
if g:PlugLoaded('nerdcommenter')
     let g:NERDSpaceDelims = 1                                               " Add spaces after comment delimiters by default
     let g:NERDCompactSexyComs = 1                                           " Use compact syntax for prettified multi-line comments
     let g:NERDDefaultAlign = 'left'                                         " Align line-wise comment delimiters flush left instead of following code indentation
     let g:NERDAltDelims_java = 1                                            " Set a language to use its alternate delimiters by default
     let g:NERDCommentEmptyLines = 1                                         " Allow commenting and inverting empty lines (useful when commenting a region)
     let g:NERDTrimTrailingWhitespace = 1                                    " Enable trimming of trailing whitespace when uncommenting
     let g:NERDToggleCheckAllLines = 1                                       " Enable NERDCommenterToggle to check all selected lines is commented or not
endif
" }}}

" {{{
if g:PlugLoaded('gruvbox')
    let g:gruvbox_contrast_dark = 'hard'
    colorscheme gruvbox
endif
" }}}

" {{{
if g:PlugLoaded('PIV')
    " {{{
    augroup php_filetype_config
        autocmd!
        autocmd VimEnter *.php set syntax=php.doxygen       " enable phpdoc and function separate folds
        autocmd FileType php let g:pdv_cfg_php4always = 0   " disable phpdoc include method/property @access
        autocmd FileType php let g:pdv_cfg_foldmarker = 0   " disable phpdoc include foldmarker
    augroup END
    " }}}
endif
" }}}

" {{{
if g:PlugLoaded('dbext.vim')
    let  g:dbext_default_history_file = printf('%s/dbext_sql_history.txt', g:vim_dir)
endif
" }}}


